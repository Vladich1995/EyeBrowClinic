const admin = require('firebase-admin');
const  fetch = require('node-fetch');
const { URLSearchParams } = require('url');
const { Storage } = require('@google-cloud/storage');
const fs = require('fs');
const request = require('request');
const axios = require('axios');

const serviceAccount = require('../files/eyebrowcli-firebase-adminsdk-5w7wj-c9c4045a14');

const db = admin.database();
let ref = db.ref('procedures');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: 'https://eyebrowcli-default-rtdb.firebaseio.com/',
  storageBucket: 'eyebrowcli.appspot.com'
}, "procedure");

const storage = new Storage({
  projectId: 'eyebrowcli',
  keyFilename: serviceAccount
});

class Procedure {
    constructor(pName, pDuration, pPrice, pGoal, pDescription) {
        this.pName = pName;
        this.pDuration = pDuration;
        this.pPrice = pPrice;
        this.pGoal = pGoal;
        this.pDescription = pDescription;
    }
}

const firebaseConfig = {
    apiKey: "AIzaSyDBPrleIBJv89kakAvw5-SZcRxOwG42VEQ",
    authDomain: "eyebrowcli.firebaseapp.com",
    projectId: "eyebrowcli",
    storageBucket: "eyebrowcli.appspot.com",
    messagingSenderId: "176749062648",
    appId: "1:176749062648:web:094c3e272ee9928b660e0d"
  };



  const addProcedure = (req, res, next) => {
    ref = db.ref(`procedures/${req.body.pName}`);
    ref.push(req.body,(error) => {
      if (error) {
        console.log('Data could not be saved:' + error);
        res.json({success: false, message: error})
      } else {
        console.log('Data saved successfully.');
      }
    });
    res.json({success: true});
  }


  const getList = (req, res, next) => {
    const ref = db.ref('procedures');
    ref.once('value', async function(dataSnapshot) {
      const procedureList = [];
  
      dataSnapshot.forEach(function(childSnapshot) {
        let childData = childSnapshot.val();
        const childKey = childSnapshot.key;
        const firstKey = Object.keys(childData)[0];
          Object.values(childData).forEach(function(procedureData) {
            procedureList.push({...procedureData, pName: childKey});
          });
      });
  
      res.json({procedureList: procedureList, success: true});
    }, function(error) {
      console.error(error);
      res.json({success: false});
    });
  }



  const deleteProcedure = (req, res, next) => {
    const {target} = req.body;
    const ref = db.ref(`procedures/${target}`);
    ref.remove()
    .then(() => {
        console.log("Data removed successfully");
        res.json({success: true});
    })
    .catch((error) => {
        console.error("Error removing data:", error);
        res.json({success: false});
    });
  }

  const updateProcedure = (req, res, next) => {
    const {name, property, value} = req.body;
    const ref = db.ref(`procedures/${name}`);
    ref.once('value')
    .then(function(snapshot) {
      var childData = snapshot.val();
      const firstKey = Object.keys(childData)[0];
      const ref2 = db.ref(`procedures/${name}/${firstKey}`);
      var updates = {};
      updates[property] = value;
      ref2.update(updates).then(() => {
        console.log('Object updated successfully');
      }).catch((error) => {
        console.error('Error updating object:', error);
      });
    });
    // ref.on('value', async function(dataSnapshot) {
    //   dataSnapshot.forEach(function(childSnapshot) {
    //     let childData = childSnapshot.val();
    //     const childKey = childSnapshot.key;
    //     const firstKey = Object.keys(childData)[0];
    //     console.log(firstKey);
    //   });

    // }, function(error) {
    //   console.error(error);
    //   res.json({success: false});
    // });
  }

exports.addProcedure = addProcedure;
exports.getList = getList;
exports.deleteProcedure = deleteProcedure;
exports.updateProcedure = updateProcedure;