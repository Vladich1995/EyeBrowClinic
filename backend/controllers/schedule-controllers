const admin = require('firebase-admin');
const  fetch = require('node-fetch');
const { URLSearchParams } = require('url');
const { Storage } = require('@google-cloud/storage');

const serviceAccount = require('../files/eyebrowcli-firebase-adminsdk-5w7wj-c9c4045a14');

const db = admin.database();

admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: 'https://eyebrowcli-default-rtdb.firebaseio.com/',
    storageBucket: 'eyebrowcli.appspot.com'
  }, "schedule");

const storage = new Storage({
  projectId: 'eyebrowcli',
  keyFilename: serviceAccount
});


const firebaseConfig = {
    apiKey: "AIzaSyDBPrleIBJv89kakAvw5-SZcRxOwG42VEQ",
    authDomain: "eyebrowcli.firebaseapp.com",
    projectId: "eyebrowcli",
    storageBucket: "eyebrowcli.appspot.com",
    messagingSenderId: "176749062648",
    appId: "1:176749062648:web:094c3e272ee9928b660e0d"
  };

  const setWorkingDays = (req, res, next) => {
    ref = db.ref(`workingDays`);
    try{
        ref.remove()
        .then(() => {
            ref.push(req.body.schedule,(error) => {
                if (error) {
                  console.log('Data could not be saved:' + error);
                  res.json({success: false, message: error})
                } else {
                  console.log('Data saved successfully.');
                  res.json({success: true});
                }
              });
        })
        .catch((error) => {
            console.error("Error removing data:", error);
            res.json({success: false});
        });
    } catch (err) {
        console.log(err);
        res.json({success: false});
    }
  }

  const getWorkingDays = (req, res, next) => {
    const ref = db.ref('workingDays');
    ref.once('value', async function(dataSnapshot) {
        const data = dataSnapshot.val();
        const firstKey = Object.keys(data)[0];
        res.json({days: data[firstKey], success: true});
    }, function(error) {
      console.error(error);
      res.json({success: false});
    });
  }

  const updateVacation = (req, res, next) => {
    const ref = db.ref('vacationDays');
    ref.push(req.body.day,(error) => {
      if (error) {
        console.log('Vacation day could not be saved:' + error);
        res.json({success: false, message: error})
      } else {
        console.log('Vacation day saved successfully.');
        res.json({success: true});
      }
    });
  }

  const getVacations = (req, res, next) => {
    const ref = db.ref('vacationDays');
    ref.once('value', async function(dataSnapshot) {
      const vacations = [];
  
      dataSnapshot.forEach(function(childSnapshot) {
          let childData = childSnapshot.val();
          const childKey = childSnapshot.key;
          const firstKey = Object.keys(childData)[0];
          vacations.push(childData);
      });
      res.json({vacations: vacations, success: true});
    }, function(error) {
      console.error(error);
      res.json({success: false});
    });
  }

  const setWorkingTimes = (req, res, next) => {
    const ref = db.ref('workingTimes');
    ref.remove().then(() => {
      ref.push(req.body,(error) => {
          if (error) {
            console.log('Data could not be saved:' + error);
            res.json({success: false, message: error})
          } else {
            console.log('Data saved successfully.');
            res.json({success: true});
          }
        });
    })
    .catch((error) => {
        console.error("Error removing data:", error);
        res.json({success: false});
    });
  }

  const setTimeIntervals = (req, res, next) => {
    const ref = db.ref('workingInterval');
    ref.remove().then(() => {
      ref.push(req.body,(error) => {
        if (error) {
          console.log('Working interval could not be saved:' + error);
          res.json({success: false, message: error})
        } else {
          console.log('Working interval saved successfully.');
          res.json({success: true});
        }
      });
    }).catch((error) => {
      console.error("Error removing data:", error);
      res.json({success: false});
    });
  }

  const getTimeSettings = (req, res, next) => {
    const ref = db.ref('workingTimes');
    const timeSettings = [];
    ref.once('value', async function(dataSnapshot) {
      const data = dataSnapshot.val();
      const firstKey = Object.keys(data)[0];
      timeSettings.push(data[firstKey]);
      const ref2 = db.ref('workingInterval');
      ref2.once('value', async function(dataSnapshot) {
        const data = dataSnapshot.val();
        const firstKey = Object.keys(data)[0];
        timeSettings.push(data[firstKey]);
        const start = timeSettings[0]["start"];
        const end = timeSettings[0]["end"];                
        let interval = timeSettings[1]["interval"];
        interval = parseInt(interval);
        const startHour = start.slice(0,2);
        const startMin = start.slice(3,5);
        const endHour = end.slice(0,2);
        const endMin = end.slice(3,5);
        const startTime = new Date(2000, 0, 1);
        startTime.setHours(startHour);
        startTime.setMinutes(startMin);
        const endTime = new Date(2000, 0, 1);
        endTime.setHours(endHour);
        endTime.setMinutes(endMin);
        const timeArray = [];
        timeArray.push("Select an hour");
        while(startTime.getHours() <= endTime.getHours()){
          let time;
          if(startTime.getMinutes() == 0){
            time = (startTime.getHours()).toString() + ":" + (startTime.getMinutes()).toString() + "0";
          }
          else{
            time = (startTime.getHours()).toString() + ":" + (startTime.getMinutes()).toString();
          }
          if(startTime.getHours() < 10 && startTime.getHours() >= 0){
            time = "0" + time;
          }
          if(startTime.getHours() < endTime.getHours()){
            timeArray.push(time);
          }
          if(startTime.getHours() == endTime.getHours()){
            if(startTime.getMinutes() <= endTime.getMinutes()){
              timeArray.push(time);
            }
          }
          startTime.setMinutes(startTime.getMinutes() + interval);
          }
          res.json({success: true, timeOptions: timeArray});
      }, function(error) {
        console.error(error);
        res.json({success: false});
      });
    }, function(error) {
      console.error(error);
      res.json({success: false});
    });
  }

  

  const completeOrder = (req, res, next) => {
    const ref = db.ref('Orders');
    ref.push(req.body,(error) => {
      if (error) {
        console.log('New order could not be saved:' + error);
        res.json({success: false, message: error})
      } else {
        console.log('New order saved successfully.');
        res.json({success: true});
      }
    });
  }

  const getOrdersByDay = (req, res, next) => {
    const ref = db.ref('Orders');
    ref.once('value', async function(dataSnapshot) {
      const orders = [];
      dataSnapshot.forEach(function(childSnapshot) {
          let childData = childSnapshot.val();
          const childKey = childSnapshot.key;
          const firstKey = Object.keys(childData)[0];
          if(childData.day == req.params.day){
            orders.push(childData);
          }
      });
      res.json({orders: orders, success: true});
    }, function(error) {
      console.error(error);
      res.json({success: false});
    });
  }

  const getAllOrders = (req, res, next) => {
    const ref = db.ref('Orders');
    ref.once('value', async function(dataSnapshot) {
      const currentDate = new Date();
      const orders = [];
      let ordersInDay = {};
      dataSnapshot.forEach(function(childSnapshot) {
          let childData = childSnapshot.val();
          const childKey = childSnapshot.key;
          const firstKey = Object.keys(childData)[0];
          let givenDate = new Date(childData["day"]);
          if(currentDate <= givenDate){
            orders.push(childData);
            if(Object.keys(ordersInDay).includes(childData["day"])){
              ordersInDay[childData["day"]] = ordersInDay[childData["day"]] + 1;
            }
            else{
              ordersInDay[childData["day"]] = 1;
            }
          }
      });

      res.json({orders: orders, ordersInDay: ordersInDay, success: true});
    }, function(error) {
      console.error(error);
      res.json({success: false});
    });
  }

  exports.setWorkingDays = setWorkingDays;
  exports.getWorkingDays = getWorkingDays;
  exports.updateVacation = updateVacation;
  exports.getVacations = getVacations;
  exports.setWorkingTimes = setWorkingTimes;
  exports.setTimeIntervals = setTimeIntervals;
  exports.getTimeSettings = getTimeSettings;
  exports.completeOrder = completeOrder;
  exports.getOrdersByDay = getOrdersByDay;
  exports.getAllOrders = getAllOrders;